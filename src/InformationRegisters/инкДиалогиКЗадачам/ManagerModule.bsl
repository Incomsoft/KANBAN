
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Получить диалоги к задаче таблица
//
// Параметры:
//  ЗадачаПользователя	 - Ссылка	 - Задача пользователя 
//	ИДСообщения 		 - Строка	 - УИД сообщения	
//  РассылкаВыполнена    - Булево	 - Признак отбора по выполненной рассылке
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица со списком диалогов
//
Функция ПолучитьДиалогиКЗадачеТаблица(ЗадачаПользователя,ИДСообщения = Неопределено,РассылкаВыполнена = Неопределено) Экспорт
	
	ДиалогиКЗадаче = Новый ТаблицаЗначений;
	
	Если НЕ ЗначениеЗаполнено(ЗадачаПользователя) Тогда
		Возврат ДиалогиКЗадаче;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкДиалогиКЗадачам.ЗадачаПользователя КАК ЗадачаПользователя,
		|	инкДиалогиКЗадачам.ИДСообщения КАК ИДСообщения,
		|	инкДиалогиКЗадачам.Проект КАК Проект,
		|	инкДиалогиКЗадачам.Автор КАК Автор,
		|	инкДиалогиКЗадачам.Дата КАК Дата,
		|	инкДиалогиКЗадачам.РассылкаВыполнена КАК РассылкаВыполнена,
		|	инкДиалогиКЗадачам.СообщениеДиалога КАК СообщениеДиалога
		|ИЗ
		|	РегистрСведений.инкДиалогиКЗадачам КАК инкДиалогиКЗадачам
		|ГДЕ
		|	инкДиалогиКЗадачам.ЗадачаПользователя = &ЗадачаПользователя
		|	И инкДиалогиКЗадачам.ИДСообщения = &ИДСообщения
		|	И инкДиалогиКЗадачам.РассылкаВыполнена = &РассылкаВыполнена
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("ЗадачаПользователя", ЗадачаПользователя);
	
	Если ИДСообщения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкДиалогиКЗадачам.ИДСообщения = &ИДСообщения","Истина");
	Иначе	
		Запрос.УстановитьПараметр("ИДСообщения", ИДСообщения);
	КонецЕсли;

	Если РассылкаВыполнена = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкДиалогиКЗадачам.РассылкаВыполнена = &РассылкаВыполнена","Истина");
	Иначе	
		Запрос.УстановитьПараметр("РассылкаВыполнена", РассылкаВыполнена);
	КонецЕсли;

	ДиалогиКЗадаче = Запрос.Выполнить().Выгрузить();
	
	Возврат ДиалогиКЗадаче;
	
КонецФункции

// Процедура - Удаление диалогов
//
// Параметры:
//  ЗадачаПользователя	 - Ссылка	 - Задача пользователя        
//	ИДСообщения 		 - Строка	 - УИД сообщения	
//
Процедура УдалениеДиалогов(ЗадачаПользователя,ИДСообщения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗадачаПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.инкДиалогиКЗадачам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗадачаПользователя.Установить(ЗадачаПользователя);
	Если ИДСообщения <> Неопределено Тогда
		НаборЗаписей.Отбор.ИДСообщения.Установить(ИДСообщения);
	КонецЕсли;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры   

// Процедура - Маркировка диалогов по выполненной рассылке:
//
// Параметры:
//  ДиалогиКОтправкеТаблица	 - ТаблицаЗначений	 - Таблица с диалогами по которым выполнена рассылка
//
Процедура РассылкаВыполнена(ДиалогиКОтправкеТаблица) Экспорт
	
	Для каждого ДиалогСтрока Из ДиалогиКОтправкеТаблица Цикл
		
		МенеджерЗаписи = РегистрыСведений.инкДиалогиКЗадачам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ДиалогСтрока);
		МенеджерЗаписи.РассылкаВыполнена = Истина;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#КонецЕсли


