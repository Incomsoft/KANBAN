
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНачальнымиДанными(Параметры); 
	ОбновитьДиалогиКЗадаче();     
	УстановкаРеквизитовНаФорме();
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Отправить(Неопределено);
	ОбновитьФорму(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)   

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	ОтправитьНаСервере(мИДТекущегоСообщения); 
	мИДТекущегоСообщения = "";  
	мИДРодителяСообщения = ""; 
	Элементы.ГруппаДиалогиКЗадаче.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКЗадаче(Команда)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыборЗавершение", Новый ОписаниеОповещения("ВложениеВыборЗавершение", ЭтотОбъект));
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	ЭтаФорма.Прочитать(); 
	ЭтаФорма.ОбновитьОтображениеДанных();
	ОбновитьДиалогиКЗадаче();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧасы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьЧасыЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЧасыПлан", Объект.ЧасыПлан);
	ПараметрыОткрытия.Вставить("ЧасыФакт", Объект.ЧасыФакт);
	
	ОткрытьФорму("Задача.инкЗадачаПользователя.Форма.ФормаУстановкиВремени", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧасыЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	ОбновитьФорму(Неопределено);
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
    	Если РезультатРедактирования.КоличествоЧасов <> 0 Тогда
			
			Объект.ЧасыФакт = Объект.ЧасыФакт + РезультатРедактирования.КоличествоЧасов;  
			
			Если ЗначениеЗаполнено(РезультатРедактирования.ВыполненоПоЗадаче) Тогда
				
				КомментарийСтрока = "Выполнено по задаче:"
				                  + Символы.ПС
								  + Символы.ПС
								  +	РезультатРедактирования.ВыполненоПоЗадаче
				                  + Символы.ПС
								  + Символы.ПС
								  + "Затрачено часов: "+РезультатРедактирования.КоличествоЧасов+".";
				
				Если РезультатРедактирования.ОтразитьВДиалоге Тогда
					
					ДобавитьКоментарийКЗадачеНаСервере(КомментарийСтрока);
					
				КонецЕсли;			
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли; 
	
	Записать();
		
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЭтотОбъект.Записать();
	ОтправитьНаСервере(мИДТекущегоСообщения);
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогиКЗадаче(Команда)
	
	ОтобразитьВидимостьЭлементовГруппЗаголовка(НЕ Элементы.ГруппаКомментарий.Видимость);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтобразитьВидимостьЭлементовГруппЗаголовка(ВидимостьБулево)

	Элементы.ГруппаКомментарий.Видимость = ВидимостьБулево;
	Элементы.ГруппаПанель.Видимость = ВидимостьБулево;
	Элементы.ГруппаСтатус.Видимость = ВидимостьБулево; 
	Элементы.ГруппаНаименование.Видимость = ВидимостьБулево; 
	Элементы.ГруппаКоманднаяПанель.Видимость = ВидимостьБулево; 

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДиалогиВвидеДереваПриИзменении(Элемент)
		
	ОбновитьДиалогиКЗадаче();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыВСообщение(Команда)
	
	ВладелецФайла = Объект.Ссылка;
	Если НЕ ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;  
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДействиеНаФорме","ДобавитьФайлВСообщение");
	
	ОбработчикДобавления = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецФайла, ЭтаФорма.УникальныйИдентификатор, , , ОбработчикДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКЗадаче(Команда)
	
	Элементы.ГруппаДиалогиКЗадаче.Видимость = НЕ Элементы.ГруппаДиалогиКЗадаче.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Создание каталога к задаче:

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
        Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
        ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
        ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
    Иначе
        ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыборЗавершение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        НачатьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры.ВыборЗавершение);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложениеВыборЗавершение(ДополнительныеПараметры, ДопПараметр) Экспорт
	
	ПолучитьИмяКаталога = ПолучитьИмяКаталогаЗадачи();
	Если ПолучитьИмяКаталога = "" Тогда
		Возврат;
	КонецЕсли;
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("КаталогДокументовЗавершение",ЭтотОбъект),ПолучитьИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДокументовЗавершение(ИмяКаталогаДокументов, ДополнительныеПараметры) Экспорт 
	
	инкОбщийКлиентСервер.СообщитьПользователю("Создан каталог: "+ИмяКаталогаДокументов);
	ПереместитьСлужебныеФайлыВКаталогПользователя(ИмяКаталогаДокументов);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПереместитьСлужебныеФайлыВКаталогПользователя(ИмяКаталогаДокументов)
	
	ФайлыМассив = ПолучитьФайлыЗадачиНаСервере(); 
	
	Если ФайлыМассив.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
	ПараметрыДиалога.ВыборКаталога = Ложь;
	ПараметрыДиалога.Каталог = ИмяКаталогаДокументов;
	
	Для каждого ФайлЭлемент Из ФайлыМассив Цикл
		НачатьПолучениеФайлаССервера(ФайлЭлемент.АдресФайла, ФайлЭлемент.ИмяФайла, ПараметрыДиалога);
	КонецЦикла;
	
КонецПроцедуры                                  

&НаСервере
Функция ПолучитьФайлыЗадачиНаСервере()	
	
	ФайлыЗадачиМассив = Новый Массив;
	
	Если Константы.инкПолучатьФайлыКЗадачеПриСозданииКаталога.Получить() Тогда
		ДобавитьФайлОписаниеЗадачи(ФайлыЗадачиМассив);
		ДобавитьФайлыПрикрепленныеЗадаче(ФайлыЗадачиМассив);
	КонецЕсли;
	
	Возврат ФайлыЗадачиМассив;	
	
КонецФункции  

&НаСервере
Процедура  ДобавитьФайлыПрикрепленныеЗадаче(ФайлыЗадачиМассив)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкЗадачаПользователяПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.инкЗадачаПользователяПрисоединенныеФайлы КАК инкЗадачаПользователяПрисоединенныеФайлы
		|ГДЕ
		|	инкЗадачаПользователяПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ инкЗадачаПользователяПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыборкаДетальныеЗаписи.Ссылка, Неопределено);

		ФайлСтруктура = ПолучитьСтруктураФайлаНаСервере(); 
		ФайлСтруктура.ИмяФайла = ДанныеФайла.Наименование
		                       + "."
							   + ДанныеФайла.Расширение;
		ФайлСтруктура.АдресФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		                                 
		ФайлыЗадачиМассив.Добавить(ФайлСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтруктураФайлаНаСервере()

	ФайлСтруктура = Новый Структура;
	ФайлСтруктура.Вставить("ИмяФайла");
	ФайлСтруктура.Вставить("АдресФайла");
	
	Возврат ФайлСтруктура; 
	
КонецФункции

&НаСервере
Процедура  ДобавитьФайлОписаниеЗадачи(ФайлыЗадачиМассив)
	
	ФайлСтруктура = ПолучитьСтруктураФайлаНаСервере();

	ФайлСтруктура.ИмяФайла = "ОписаниеКЗадаче - "+Объект.Номер+".txt";
	
	ВремКаталог =  КаталогВременныхФайлов();
    ПутьКФайлу = ВремКаталог + ФайлСтруктура.ИмяФайла;
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.ВставитьСтроку(1,Объект.Наименование);
	ТекстовыйФайл.ВставитьСтроку(2,"");
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
	ИндексСтроки = 3;
	Для каждого ДиалогСтрока Из ЗадачаОбъект.ДиалогиКЗадачеТаблица Цикл
		
		ТекстСообщения = ДиалогСтрока.СообщениеДиалога.Получить().ПолучитьТекст();
		ТекстовыйФайл.ВставитьСтроку(ИндексСтроки,ТекстСообщения);
		ТекстовыйФайл.ВставитьСтроку(ИндексСтроки+1,"");
		
		ИндексСтроки = ИндексСтроки + 2;
		
	КонецЦикла;
	
	ТекстовыйФайл.Записать(ПутьКФайлу); 
	
	ДвоичныйФайл = Новый ДвоичныеДанные(ПутьКФайлу);

	ФайлСтруктура.АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныйФайл);

	ФайлыЗадачиМассив.Добавить(ФайлСтруктура);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Тогда
 		//
	ИначеЕсли ЕстьТекстВКомментарии() Тогда
	
		ТекстВопроса = НСтр("ru = 'Внимание! Форма содержит комментарий. Отразить его в диалогах?';");

		ПоказатьВопрос(
          Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
          ТекстВопроса, 
          РежимДиалогаВопрос.ДаНетОтмена);
        Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФормуБулево = Истина;
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Отправить(Неопределено);   
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		мКомментарийКЗадаче = "";	
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда	
		ЗакрытьФормуБулево = Ложь;
	КонецЕсли;	
	
	Если ЗакрытьФормуБулево Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область о // Дополнительные процедуры и функции:

&НаСервере
Процедура РедактироватьТекущееСообщение(ИДСообщения,ТекстСообщения)
	
	Если ИДСообщения = "" Тогда
		Возврат;
	КонецЕсли;  
	
	НаборЗаписей = РегистрыСведений.инкДиалогиКЗадачам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИДСообщения.Установить(ИДСообщения);
	НаборЗаписей.Прочитать();     
	
	Для каждого ДиалогКЗадачеСтрока Из НаборЗаписей Цикл
		ДиалогКЗадачеСтрока.СообщениеДиалога = Новый ХранилищеЗначения(мКомментарийКЗадаче, Новый СжатиеДанных(9));
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
    мИДПоследнегоСообщения = ИДСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовоеСообщение(КомментарийКЗадаче)
	
	Если КомментарийКЗадаче.Элементы.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогКЗадачеСтрока = РегистрыСведений.инкДиалогиКЗадачам.СоздатьМенеджерЗаписи();
	ДиалогКЗадачеСтрока.ЗадачаПользователя = Объект.Ссылка;	
	ДиалогКЗадачеСтрока.Проект 		= Объект.Проект;	
	ДиалогКЗадачеСтрока.Дата		= ТекущаяДата();	
	ДиалогКЗадачеСтрока.Автор       = Пользователи.ТекущийПользователь();
	ДиалогКЗадачеСтрока.СообщениеДиалога = Новый ХранилищеЗначения(КомментарийКЗадаче, Новый СжатиеДанных(9));
	ДиалогКЗадачеСтрока.ИДСообщения = Новый УникальныйИдентификатор;
	ДиалогКЗадачеСтрока.ИДСообщениеРодителя = мИДРодителяСообщения;
	
	ДиалогКЗадачеСтрока.Записать(Истина);  
	
	мИДПоследнегоСообщения = ДиалогКЗадачеСтрока.ИДСообщения;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДиалогиКЗадаче()
	
	мДиалогиКЗадаче = ПолучитьТабличныйДокументДиалогиКЗадаче();	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьОформление(Команда)
	
	ЦветТекста = Новый Цвет;
	ЦветФона = Новый Цвет;
	Шрифт = Новый Шрифт(,13,Ложь,Ложь,Ложь,Ложь,100);
	
	Для каждого ПараграфКомментария Из мКомментарийКЗадаче.Элементы Цикл
		
		Если ПараграфКомментария.ТипПараграфа = ТипПараграфа.Обычный Тогда
			
			Для каждого ЭлементПараграфа Из ПараграфКомментария.Элементы Цикл
				
				Если ТипЗнч(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
					ЭлементПараграфа.ЦветТекста = ЦветТекста;
					ЭлементПараграфа.ЦветФона 	= ЦветФона;
					ЭлементПараграфа.Шрифт 		= Шрифт;
				КонецЕсли;
				
			КонецЦикла;	
			
		Иначе 
	 		Продолжить;
	 	КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоментарийКЗадачеНаСервере(КомментарийСтрока)

	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	ЗадачаОбъект.ДобавитьКомментарийКЗадаче(КомментарийСтрока);
	ЗадачаОбъект.Записать();
	ЗначениеВРеквизитФормы(ЗадачаОбъект,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановкаРеквизитовНаФорме()
	
	Элементы.ЧасыПлан.Доступность = Ложь;
	Элементы.ЧасыФакт.Доступность = Ложь;
	
	Если Объект.ЧасыПлан = 0 Тогда
		Элементы.ЧасыПлан.Доступность = Истина;	
	КонецЕсли;            
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКаталогаЗадачи()

	ИмяКаталога = "";
	ТекущийПользователь = Пользователи.ТекущийПользователь(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПутиККаталогамЗадач.ПроектКЗадаче КАК ПроектКЗадаче,
		|	инкПутиККаталогамЗадач.Пользователь КАК Пользователь,
		|	инкПутиККаталогамЗадач.Каталог КАК Каталог
		|ИЗ
		|	РегистрСведений.инкПутиККаталогамЗадач КАК инкПутиККаталогамЗадач
		|ГДЕ
		|	инкПутиККаталогамЗадач.ПроектКЗадаче = &ПроектКЗадаче
		|	И инкПутиККаталогамЗадач.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПроектКЗадаче", Объект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяКаталога = ВыборкаДетальныеЗаписи.Каталог;	
	КонецЦикла;
	НаименованиеЗадачи = ОбработатьНаименованиеЗадачи(Объект.Наименование);
	
	Если ЗначениеЗаполнено(ИмяКаталога) Тогда
		ИмяКаталога = ИмяКаталога 
					+ "\здч" + СокрЛП(Объект.Номер)
					+ " - " 
					+ НаименованиеЗадачи;
	Иначе
		инкОбщийКлиентСервер.СообщитьПользователю("У пользователя "+ТекущийПользователь+" не задан корневой каталог с задачами. См. регистр сведений ""Пути к каталогам задач (Инкомсофт)""");
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции   

&НаСервере
Функция ОбработатьНаименованиеЗадачи(НаименованиеСтрока)
	
	НовоеНаименование = НаименованиеСтрока;
	НовоеНаименование = СтрЗаменить(НовоеНаименование,":"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"<"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,">"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,""""," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"/"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"\"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"|"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"?"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,"*"," ");
	НовоеНаименование = СтрЗаменить(НовоеНаименование,".","");
	
	НовоеНаименование = СокрЛП(НовоеНаименование);
	
	Возврат НовоеНаименование;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачальнымиДанными(Параметры)
	
	ЗаполнитьЗначенияСвойств(Объект,Параметры);
	
	Если инкОбщийКлиентСервер.ЕстьСвойство(Параметры,"Проект") Тогда
		Объект.Проект = Параметры.Проект;
	КонецЕсли;      
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Объект.Проект = ПараметрыСеанса.ТекущийПользователь.инкПроектПоУмолчанию;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.СортировкаДиалогов) Тогда
		Объект.СортировкаДиалогов = "ДатаПоУбыванию";
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСсылкуОбъекта(Элемент)  
	
	Попытка
		
		Врем = Элемент;
	    Пока Врем <> Неопределено Цикл
	        Если НРег(Врем.tagName) = "a" Тогда
	            Возврат Врем;
	        КонецЕсли;
	        Врем = Врем.parentElement;
	    КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		//ОписаниеОшибки()
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОтправитьНаСервере(ИДСообщения = "")
	
	Если НЕ ЕстьТекстВКомментарии() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИДСообщения = "" Тогда
		ЗаписатьНовоеСообщение(мКомментарийКЗадаче);
	Иначе
		РедактироватьТекущееСообщение(ИДСообщения,мКомментарийКЗадаче);
	КонецЕсли;
	
	мКомментарийКЗадаче = "";   
	ОбновитьДиалогиКЗадаче();
	
КонецПроцедуры 

&НаСервере
Функция ЕстьТекстВКомментарии()
	
	ЕстьТекстВКомментарии = Ложь;
	ТекМаркСписок = Неопределено;
    ТекНумСписок = Неопределено;  
	
	Для Каждого Параграф Из мКомментарийКЗадаче.Элементы Цикл
        
        ЭтоМаркСписок = Параграф.ТипПараграфа=ТипПараграфа.МаркированныйСписок;
        ЭтоНумСписок = Параграф.ТипПараграфа=ТипПараграфа.НумерованныйСписок;
        ЭтоОбычныйСписок = Параграф.ТипПараграфа=ТипПараграфа.Обычный;

        Если ЭтоМаркСписок И ТекМаркСписок<>Неопределено Тогда 
            НовыйПараграф = ТекМаркСписок;
        ИначеЕсли ЭтоНумСписок И ТекНумСписок<>Неопределено Тогда 
            НовыйПараграф = ТекНумСписок;
        Иначе 
            ТекМаркСписок = ?(ЭтоМаркСписок, НовыйПараграф, Неопределено);
            ТекНумСписок = ?(ЭтоНумСписок, НовыйПараграф, Неопределено);
        КонецЕсли;
        
        Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				
				СообщениеСтрока = СокрЛП(ЭлементПараграфа.Текст);
				Если СообщениеСтрока <> "" Тогда
					ЕстьТекстВКомментарии = Истина;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда	
				
				ЕстьТекстВКомментарии = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьТекстВКомментарии Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ЕстьТекстВКомментарии;
	
КонецФункции

#КонецОбласти

#Область о // Загрузка диалога к задаче:

&НаСервере
Функция ПолучитьТабличныйДокументДиалогиКЗадаче()	
	
	ЗадачаСсылка = Объект.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДиалогиКЗадаче = Новый ТабличныйДокумент;
	ДиалогиМакет = Задачи.инкЗадачаПользователя.ПолучитьМакет("ДиалогКЗадачеМакет");
	
	ДиалогиТаблица = РегистрыСведений.инкДиалогиКЗадачам.ПолучитьДиалогиКЗадачеТаблица(ЗадачаСсылка);
	ФайлыТаблица = РегистрыСведений.инкДиалогиКЗадачам.ПолучитьФайлыТаблица(ЗадачаСсылка); 
	
	Если Объект.СортировкаДиалогов = "ДатаПоУбыванию" Тогда		
		ДиалогиТаблица.Сортировать("Дата УБЫВ");
	КонецЕсли;
	
	ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,"ДиалогОтступ");

	Если Объект.ОтображатьДиалогиВвидеДерева Тогда
		
		РодителиПоиск = Новый Структура;
		РодителиПоиск.Вставить("ИДСообщениеРодителя","");
		ДиалогиМассив = ДиалогиТаблица.НайтиСтроки(РодителиПоиск); 
		
		ДиалогиКЗадаче.НачатьАвтогруппировкуСтрок();

		Для каждого ДиалогСтрока Из ДиалогиМассив Цикл
			
			ВывестиСтрокуДиалогаРекурсивно(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица,ДиалогиТаблица,0);
			ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,"ДиалогОтступ");
			
		КонецЦикла; 
		
		ДиалогиКЗадаче.ЗакончитьАвтогруппировкуСтрок();
		ДиалогиКЗадаче.ОтображатьЗаголовки = Истина;
	    ДиалогиКЗадаче.ОтображатьГруппировки = Истина;
	    //ДиалогиКЗадаче.ПоказатьУровеньГруппировокСтрок(0);
		
	Иначе
		
		Для каждого ДиалогСтрока Из ДиалогиТаблица Цикл
			
			ВывестиСтрокуДиалога(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица); 
			ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,"ДиалогОтступ");
			
		КонецЦикла;  
		
	КонецЕсли;
	
	Возврат ДиалогиКЗадаче;

КонецФункции      

&НаСервере
Процедура ВывестиСтрокуДиалогаРекурсивно(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица,ДиалогиТаблица,Уровень)
	
	ВывестиЗаголовок(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,Уровень);
	ВывестиПрикрепленныеФайлы(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица,Уровень);
    ВывестиТекстДиалога(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,Уровень);	
	
	РодителиПоиск = Новый Структура;
	РодителиПоиск.Вставить("ИДСообщениеРодителя",ДиалогСтрока.ИДСообщения);
	ДиалогиМассив = ДиалогиТаблица.НайтиСтроки(РодителиПоиск); 
	Для каждого ДиалогСтрока Из ДиалогиМассив Цикл
		
		ВывестиСтрокуДиалогаРекурсивно(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица,ДиалогиТаблица,Уровень+1);
		
	КонецЦикла;    
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуДиалога(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица)
	
	ВывестиЗаголовок(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче);
	ВывестиПрикрепленныеФайлы(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица);
    ВывестиТекстДиалога(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче);	

КонецПроцедуры 

&НаСервере
Процедура ВывестиПрикрепленныеФайлы(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,ФайлыТаблица,Уровень = 0)
	
	ФайлыСообщенияПоиск = Новый Структура("ИДСообщения",ДиалогСтрока.ИДСообщения);
	ФайлыМассив = ФайлыТаблица.НайтиСтроки(ФайлыСообщенияПоиск);
	Для каждого ФайлСообщения Из ФайлыМассив Цикл
		
		// Отступы:
		ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогФайл|ДиалогОтступСверху");	
		ДиалогиКЗадаче.Вывести(ДиалогОбласть,Уровень);
		Для ОступЧисло = 1 По Уровень Цикл
			ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);	
		КонецЦикла;
		
		// Прикрепленные файлы:
		ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогФайл|ДиалогСообщение");
		ДиалогОбласть.Параметры.ФайлИмя = ФайлСообщения.Наименование+"."+ФайлСообщения.Расширение;
		
		РашифровкаСтруктура = Новый Структура;
		РашифровкаСтруктура.Вставить("ВидРасшифровки","ОткрытьФайл");
		РашифровкаСтруктура.Вставить("ИДСообщения",ФайлСообщения.Ссылка.УникальныйИдентификатор());
		ДиалогОбласть.Параметры.ОткрытьФайлРасшифровка = РашифровкаСтруктура;
		
		РашифровкаСтруктура = Новый Структура;
		РашифровкаСтруктура.Вставить("ВидРасшифровки","УдалитьФайл");
		РашифровкаСтруктура.Вставить("ИДСообщения",ФайлСообщения.Ссылка.УникальныйИдентификатор());
		ДиалогОбласть.Параметры.УдалитьФайлРасшифровка = РашифровкаСтруктура;

		ДиалогОбласть.Параметры.ФайлИмя = ФайлСообщения.Наименование+"."+ФайлСообщения.Расширение;
		
		ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);
	КонецЦикла;

КонецПроцедуры 
	
&НаСервере
Процедура ВывестиЗаголовок(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,Уровень = 0)
	
	// Отступы:
	ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогЗаголовок|ДиалогОтступСверху");	
	ДиалогиКЗадаче.Вывести(ДиалогОбласть,Уровень);
	Для ОступЧисло = 1 По Уровень Цикл
		ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);	
	КонецЦикла;

	// Заголовок:
    ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогЗаголовок|ДиалогСообщение");
	ЗаполнитьЗначенияСвойств(ДиалогОбласть.Параметры, ДиалогСтрока);
	
	// Комментировать:
	РашифровкаСтруктура = Новый Структура;
	РашифровкаСтруктура.Вставить("ВидРасшифровки","Комменировать");
	РашифровкаСтруктура.Вставить("ИДСообщения",ДиалогСтрока.ИДСообщения);
	ДиалогОбласть.Параметры.КомментироватьРасшифровка = РашифровкаСтруктура;
	
	// Редактировать:
	РашифровкаСтруктура = Новый Структура;
	РашифровкаСтруктура.Вставить("ВидРасшифровки","Редактировать");
	РашифровкаСтруктура.Вставить("ИДСообщения",ДиалогСтрока.ИДСообщения);
	ДиалогОбласть.Параметры.РедактироватьРасшифровка = РашифровкаСтруктура;

	// Удалить:
	РашифровкаСтруктура = Новый Структура;
	РашифровкаСтруктура.Вставить("ВидРасшифровки","Удалить");
	РашифровкаСтруктура.Вставить("ИДСообщения",ДиалогСтрока.ИДСообщения);
	ДиалогОбласть.Параметры.УдалитьРасшифровка = РашифровкаСтруктура;
	
	// Прикрепить файлы:
	РашифровкаСтруктура = Новый Структура;
	РашифровкаСтруктура.Вставить("ВидРасшифровки","ПрикрепитьФайлы");
	РашифровкаСтруктура.Вставить("ИДСообщения",ДиалогСтрока.ИДСообщения);
	ДиалогОбласть.Параметры.ПрикрепитьФайлыРасшифровка = РашифровкаСтруктура;

	ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЦветФонаКомментария(ЦветФона,ОбластьВывода,ТекущийТабличныйДокумент)
	
	ТекущийТабличныйДокумент.Область(ОбластьВывода.Верх, 2, ОбластьВывода.Низ, 2).ЦветФона = ЦветФона;
	
КонецПроцедуры   

&НаСервере
Функция ПолучитьМассивСтрокВСообщении(ФорматированныйТекст)

	МассивСтрокВСообщении = Новый Массив; 
	
    Для Каждого Параграф Из ФорматированныйТекст.Элементы Цикл

        Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл

			СтруктураСообщения = Новый Структура;
			СтруктураСообщения.Вставить("ТекстСообщения","");
			СтруктураСообщения.Вставить("ТипПараметра","");
			СтруктураСообщения.Вставить("ЗначениеПараметра","");
			
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				
				СтруктураСообщения.ТекстСообщения = ЭлементПараграфа.Текст;
				Если ЗначениеЗаполнено(ЭлементПараграфа.НавигационнаяСсылка) Тогда
					СтруктураСообщения.ТипПараметра = "НавигационнаяСсылка";
					СтруктураСообщения.ЗначениеПараметра = ЭлементПараграфа.НавигационнаяСсылка;
				КонецЕсли;

            ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда

				СтруктураСообщения.ТекстСообщения = "";
				СтруктураСообщения.ТипПараметра = "Картинка";
				СтруктураСообщения.ЗначениеПараметра = Сред(ЭлементПараграфа.Картинка,23);
				
			КонецЕсли;  
			
			Если СтруктураСообщения.ТекстСообщения <> "" ИЛИ
				 СтруктураСообщения.ТипПараметра <> ""
			Тогда
				МассивСтрокВСообщении.Добавить(СтруктураСообщения);	
			КонецЕсли;
			
		КонецЦикла;   
		
	КонецЦикла;   
	
	МассивСтрокВСообщении = СклеитьНавигационныеСсылкиИТекст(МассивСтрокВСообщении);

	Возврат МассивСтрокВСообщении;
	
КонецФункции

&НаСервере
Функция СклеитьНавигационныеСсылкиИТекст(МассивСтрокВСообщении)
	
	ОбработкаМассив = Новый Массив;
	
	НачалоСсылки = Ложь;
	Для каждого СтрокаВСообщении Из МассивСтрокВСообщении Цикл
		
		Если СтрокаВСообщении.ТипПараметра = "НавигационнаяСсылка" Тогда
			НомерЭлемента = ОбработкаМассив.Количество()-1;
			ОбработкаМассив[НомерЭлемента].ТекстСообщения = ОбработкаМассив[НомерЭлемента].ТекстСообщения
			                                              + ПодчеркнутьТекстВМакете(СтрокаВСообщении.ТекстСообщения);
			ОбработкаМассив[НомерЭлемента].ТипПараметра = СтрокаВСообщении.ТипПараметра;
			ОбработкаМассив[НомерЭлемента].ЗначениеПараметра = СтрокаВСообщении.ЗначениеПараметра; 
			НачалоСсылки = Истина;	
		Иначе
			Если НачалоСсылки Тогда
				НомерЭлемента = ОбработкаМассив.Количество()-1;
				ОбработкаМассив[НомерЭлемента].ТекстСообщения = ОбработкаМассив[НомерЭлемента].ТекстСообщения
				                                              + СтрокаВСообщении.ТекстСообщения;
				НачалоСсылки = Ложь;											  
			Иначе	
				ОбработкаМассив.Добавить(СтрокаВСообщении);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработкаМассив;
	
КонецФункции   

&НаСервере
Функция ПодчеркнутьТекстВМакете(Строка)  
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Если Сред(Строка, Индекс, 1) <> " " И Сред(Строка, Индекс, 1) <> "_" И Сред(Строка, Индекс, 1) <> "-" Тогда 
		  Результат = Результат + Символ(863);
		КонецЕсли;
		Результат = Результат + Сред(Строка, Индекс, 1);
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ВывестиТекстДиалога(ДиалогСтрока,ДиалогиМакет,ДиалогиКЗадаче,Уровень = 0)
	
	ФорматированныйТекст = ДиалогСтрока.СообщениеДиалога.Получить();
	Если ФорматированныйТекст = Неопределено Тогда
    	Возврат;
	КонецЕсли;   
	
	МассивСтрокВСообщении = ПолучитьМассивСтрокВСообщении(ФорматированныйТекст);
	КоличествоКомментариев = 0;
	
	Для каждого СтрокаВСообщении Из МассивСтрокВСообщении Цикл
		
		Если ЗначениеЗаполнено(СтрокаВСообщении.ТекстСообщения) Тогда
			
			СообщениеСтрока = СокрЛП(СтрокаВСообщении.ТекстСообщения);
			Если СтрНайти(СообщениеСтрока,"[*]") > 0 Тогда
				Если КоличествоКомментариев = 0 Тогда
					ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,"ДиалогОтступВСообщении",Уровень); 	
				КонецЕсли;
				КоличествоКомментариев = КоличествоКомментариев + 1;
			КонецЕсли;
			
			ИмяОбласти = "ДиалогТекстСообщения";
			Если КоличествоКомментариев > 0 Тогда
				ИмяОбласти = "ДиалогТекстКомментария";
			КонецЕсли;
			
			СтрокаДляВывода = СтрЗаменить(СообщениеСтрока,"[/*]","");
			СтрокаДляВывода = СтрЗаменить(СтрокаДляВывода,"[*]","");
			Если СтрокаДляВывода <> "" Тогда
				
				// Отступы:
				ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогОтступСверху");	
				ДиалогиКЗадаче.Вывести(ДиалогОбласть,Уровень);
				Для ОступЧисло = 1 По Уровень Цикл
					ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);	
				КонецЦикла;
				
				// Текст сообщения:
				ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогСообщение");	
				ДиалогОбласть.Параметры.ТекстСообщения = СтрокаДляВывода;
				Если СтрокаВСообщении.ТипПараметра = "НавигационнаяСсылка" Тогда
					
					РашифровкаСтруктура = Новый Структура;
					РашифровкаСтруктура.Вставить("ВидРасшифровки","Гиперссылка");
					РашифровкаСтруктура.Вставить("ИДСообщения",СтрокаВСообщении.ЗначениеПараметра);
					ДиалогОбласть.Параметры.ТекстСообщенияРасшифровка = РашифровкаСтруктура;
					
				КонецЕсли;	
				
				ОбластьВывода = ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень); 
				Если СтрокаВСообщении.ТипПараметра = "НавигационнаяСсылка" Тогда
					ОбластьВывода.Гиперссылка = Истина;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрНайти(СообщениеСтрока,"[/*]") > 0 Тогда
				КоличествоКомментариев = КоличествоКомментариев - 1;
				Если КоличествоКомментариев = 0 Тогда
					ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,"ДиалогОтступВСообщении",Уровень);
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли СтрокаВСообщении.ТипПараметра = "Картинка" Тогда
			
			КартинкаОбъект = ПолучитьКартинкуОбъект(СтрокаВСообщении.ЗначениеПараметра);
			
			ИмяОбласти = "ДиалогКартинка";
			Если КоличествоКомментариев > 0 Тогда
				ИмяОбласти = "ДиалогКартинкаКомментарий";
			КонецЕсли;   
			
			// Отступы:
			ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогОтступСверху");	
			ДиалогиКЗадаче.Вывести(ДиалогОбласть,Уровень);
			Для ОступЧисло = 1 По Уровень Цикл
				ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);	
			КонецЦикла;
			
			// Картинка:
			ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогСообщение");	
			ДиалогОбласть.Параметры.Фото1 = КартинкаОбъект;				
			
			ПарметрыРасшифровкиСтруктура = Новый Структура;
			ПарметрыРасшифровкиСтруктура.Вставить("ВидРасшифровки","Картинка");
			ПарметрыРасшифровкиСтруктура.Вставить("СтрокаКартинки",СтрокаВСообщении.ЗначениеПараметра);
			ДиалогОбласть.Параметры.ФотоДанные = ПарметрыРасшифровкиСтруктура;
			
			ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень); 
					
		КонецЕсли;
				
	КонецЦикла;
	
	// Отступы:
	ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогВерхнееПодчеркивание|ДиалогОтступСверху");	
	ДиалогиКЗадаче.Вывести(ДиалогОбласть);
	Для ОступЧисло = 1 По Уровень Цикл
		ДиалогиКЗадаче.Присоединить(ДиалогОбласть);	
	КонецЦикла;
	ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть("ДиалогВерхнееПодчеркивание|ДиалогСообщение");
	ДиалогиКЗадаче.Присоединить(ДиалогОбласть);

КонецПроцедуры 

&НаСервере
Функция ПолучитьКартинкуОбъект(СтрокаКартинки)

	ДвоичныеДанныеКартинки = Base64Значение(СтрокаКартинки);
	Если ТипЗнч(ДвоичныеДанныеКартинки) = Тип("Картинка") Тогда
		КартинкаОбъект = ДвоичныеДанныеКартинки;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеКартинки) = Тип("ДвоичныеДанные") Тогда
		КартинкаОбъект = Новый Картинка(ДвоичныеДанныеКартинки);
	Иначе
		КартинкаОбъект = Новый Картинка;
	КонецЕсли;
	
	Возврат КартинкаОбъект;

КонецФункции

&НаСервере
Процедура ВывестиОтступ(ДиалогиМакет,ДиалогиКЗадаче,ИмяОбласти,Уровень = 0)
	
	// Отступы:
	ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогОтступСверху");	
	ДиалогиКЗадаче.Вывести(ДиалогОбласть,Уровень);
	Для ОступЧисло = 1 По Уровень Цикл
		ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);	
	КонецЦикла;
	ДиалогОбласть = ДиалогиМакет.ПолучитьОбласть(ИмяОбласти+"|ДиалогСообщение");
	ДиалогиКЗадаче.Присоединить(ДиалогОбласть,Уровень);

КонецПроцедуры

&НаКлиенте
Процедура мДиалогиКЗадачеТаблицаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(Расшифровка,"ВидРасшифровки") Тогда
		Возврат;
	КонецЕсли;  
	
	Если Расшифровка.ВидРасшифровки = "Картинка" Тогда
		
		ОткрытьКартинкуНаКлиенте(Расшифровка.СтрокаКартинки);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьКартинкуНаКлиенте(СтрокаКартинки)
	
	ХТМЛКодКартинки = ПолучитьХТМЛКодКартинкиНаСервере(СтрокаКартинки);
	
	Если ХТМЛКодКартинки= "" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИзображениеСтрока",ХТМЛКодКартинки);
	ПараметрыФормы.Вставить("КартинкаДиалога",Истина);
	ОткрытьФорму("Задача.инкЗадачаПользователя.Форма.ФормаИзображениеПросмотр",ПараметрыФормы,ЭтотОбъект,Новый УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьХТМЛКодКартинкиНаСервере(СтрокаКартинки)
	
	ТекстHTML = "";  
	Вложения = Новый Структура;
	
	ХТМЛКодКартинки = "<!DOCTYPE html>
                       |<html dir=""ltr"">
                       |<head>
                       |<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
                       |<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
                       |<meta name=""format-detection"" content=""telephone=no"" />
                       |<style type=""text/css"">
                       |body{margin:0;padding:8px;}
                       |p{line-height:1.15;margin:0;white-space:pre-wrap;}
                       |ol,ul{margin-top:0;margin-bottom:0;}
                       |img{border:none;}
                       |li>p{display:inline;}
                       |</style>
                       |</head>
                       |<body>
                       |<br>
                       |<p><img width=""XXX%"" src=""imageXXX"" style=""border:none;""/></p>
                       |<br>
                       |</body>
                       |</html>
                       |'";
	
	ХТМЛКодКартинки	= СтрЗаменить(ХТМЛКодКартинки, 
	            " src=""imageXXX""", 
				" src=""data:image/png;base64, " 
				+ СтрокаКартинки + """" 
				);                
				
	Возврат ХТМЛКодКартинки;
	
КонецФункции

#КонецОбласти

#Область о // Обработка расшифровки:

&НаКлиенте
Процедура мДиалогиКЗадачеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(Расшифровка,"ВидРасшифровки") Тогда
		Возврат;
	КонецЕсли;  
	
	Если Расшифровка.ВидРасшифровки = "Картинка" Тогда
		
		ОткрытьКартинкуНаКлиенте(Расшифровка.СтрокаКартинки);
		
	ИначеЕсли Расшифровка.ВидРасшифровки = "Комменировать" Тогда
		
		ОтобразитьВидимостьЭлементовГруппЗаголовка(Истина);
		ОтразитьКомментарийНаСервере(Расшифровка.ИДСообщения);
				
	ИначеЕсли Расшифровка.ВидРасшифровки = "Редактировать" Тогда
		
		ОтобразитьВидимостьЭлементовГруппЗаголовка(Истина);
		РедактироватьСообщениеНаСервере(Расшифровка.ИДСообщения);	
		
	ИначеЕсли Расшифровка.ВидРасшифровки = "Удалить" Тогда
		
		ЗадатьВопросОбУдаленииСтроки(Расшифровка.ИДСообщения);

	ИначеЕсли Расшифровка.ВидРасшифровки = "ПрикрепитьФайлы" Тогда
		
		ДобавитьФайлНаКлиенте(Расшифровка.ИДСообщения);		

	ИначеЕсли Расшифровка.ВидРасшифровки = "УдалитьФайл" Тогда
		
		УдалитьФайлСообщения(Расшифровка.ИДСообщения);		
		
	ИначеЕсли Расшифровка.ВидРасшифровки = "ОткрытьФайл" Тогда
		
		ОткрытьФайлСообщения(Расшифровка.ИДСообщения);		
		
	ИначеЕсли Расшифровка.ВидРасшифровки = "Гиперссылка" Тогда 	
		
		ПерейтиПоНавигационнойСсылке(Расшифровка.ИДСообщения);
		
	КонецЕсли;	
	
	ЭтаФорма.ТекущийЭлемент = Элементы.мКомментарийКЗадаче;  
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФайлСообщения(СсылкаСтрока)
	
	СправочникСсылка = ПолучитьСсылкуСправочникаНаСервере(СсылкаСтрока);

	Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(СправочникСсылка, Неопределено, УникальныйИдентификатор);
	Если ДанныеФайла.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлСообщения(СсылкаСтрока)
	
	СправочникСсылка = ПолучитьСсылкуСправочникаНаСервере(СсылкаСтрока);

	Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.УдалитьДанные(
		Новый ОписаниеОповещения("ПослеУдаленияДанных", ЭтотОбъект),
		СправочникСсылка, УникальныйИдентификатор);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеУдаленияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДиалогиКЗадаче();
	
КонецПроцедуры
		
&НаСервере
Функция ПолучитьСсылкуСправочникаНаСервере(УИДСправочника)
	
	СправочникСсылка = Справочники.инкЗадачаПользователяПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСправочника)); 
	Возврат СправочникСсылка;   
	
КонецФункции
	
&НаКлиенте
Процедура ДобавитьФайлНаКлиенте(ИДСообщения)
	
	ВладелецФайла = Объект.Ссылка;
	Если НЕ ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;  
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИДСообщения",ИДСообщения);
	
	ОбработчикДобавления = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецФайла, ЭтаФорма.УникальныйИдентификатор, , , ОбработчикДобавления);

КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") Тогда
	    Возврат;
	КонецЕсли;  

	Если инкОбщийКлиентСервер.ЕстьСвойство(ДополнительныеПараметры,"ДействиеНаФорме") Тогда
		
		Если ДополнительныеПараметры.ДействиеНаФорме = "ДобавитьФайлВСообщение" Тогда
			
			СимволПерехода = "";
			Если мКомментарийКЗадаче.Элементы.Количество() <> 0 Тогда
				СимволПерехода = СимволПерехода 
				               + Символы.ПС
							   + Символы.ПС;	
			КонецЕсли;
			
			мКомментарийКЗадаче.Добавить(СимволПерехода
										+ "К задаче добавлены файлы: "
									    + Символы.ПС
			                            + Символы.ПС
										);

			Для каждого ФайлЭлемент Из Результат Цикл
				мКомментарийКЗадаче.Добавить("	* "
				                    + ПолучитьПолноеИмяФайлаНаСервере(ФайлЭлемент)
									+ "; "
									+ Символы.ПС);
			КонецЦикла;
			
			ОтправитьНаСервере();
			ДополнительныеПараметры.Вставить("ИДСообщения",мИДПоследнегоСообщения);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбработатьФайлыНаСервере(Результат, ДополнительныеПараметры);    
	ОбновитьДиалогиКЗадаче();
	
КонецПроцедуры   

&НаСервере
Процедура ОбработатьФайлыНаСервере(Результат, ДополнительныеПараметры)
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(ДополнительныеПараметры,"ИДСообщения") Тогда
		Возврат;
	КонецЕсли; 
	
	ИДСообщения = ДополнительныеПараметры.ИДСообщения;
	Если НЕ ЗначениеЗаполнено(ИДСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ФайлЭлемент Из Результат Цикл
		
		ФайлОбъект = ФайлЭлемент.ПолучитьОбъект();
		ФайлОбъект.ИДСообщения = ИДСообщения;
		ФайлОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере	
Функция ПолучитьПолноеИмяФайлаНаСервере(ФайлСсылка)
	
	ИмяФайла = ФайлСсылка.Наименование
	         + "."
	         + ФайлСсылка.Расширение;
			 
	Возврат ИмяФайла;
		
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОбУдаленииСтроки(СсылкаСтрока)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаСтрока",СсылкаСтрока);
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбУдаленииСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстСообщения = НСтр("ru='Удалить строку комментария?'");
	ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры    

&НаКлиенте
Процедура ЗадатьВопросОбУдаленииСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСообщениеНаСервере(ДополнительныеПараметры.СсылкаСтрока);  
		мИДТекущегоСообщения = "";
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСообщениеНаСервере(ИДСообщения)	
	
	мИДТекущегоСообщения = ИДСообщения;
	Если НЕ ЗначениеЗаполнено(ИДСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.инкДиалогиКЗадачам.УдалениеДиалогов(Объект.Ссылка,ИДСообщения);
	ИДСообщения = "";

	ОбновитьДиалогиКЗадаче();	
	
КонецПроцедуры  

&НаСервере
Процедура РедактироватьСообщениеНаСервере(ИДСообщения)	
	
	мИДТекущегоСообщения = ИДСообщения;
	
	ДиалогиЗадачиТаблица = РегистрыСведений.инкДиалогиКЗадачам.ПолучитьДиалогиКЗадачеТаблица(Объект.Ссылка,ИДСообщения);
	Для каждого ДиалогСтрока Из ДиалогиЗадачиТаблица Цикл
		мКомментарийКЗадаче = ДиалогСтрока.СообщениеДиалога.Получить(); 	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьКомментарийНаСервере(ИДСообщения)

	ДиалогиЗадачиТаблица = РегистрыСведений.инкДиалогиКЗадачам.ПолучитьДиалогиКЗадачеТаблица(Объект.Ссылка,ИДСообщения);
	Для каждого ДиалогСтрока Из ДиалогиЗадачиТаблица Цикл
		
		СообщениеФорматированныйДокумент = ДиалогСтрока.СообщениеДиалога.Получить();
		
		ДобавитьКомментарииНачалаИКонцаВСообщение(ДиалогСтрока,СообщениеФорматированныйДокумент);
		СоединитьФорматированныеДокументы(СообщениеФорматированныйДокумент, мКомментарийКЗадаче);	
		
	КонецЦикла;	
	
	мИДРодителяСообщения = ИДСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомментарииНачалаИКонцаВСообщение(ДиалогСтрока,ФорматированныйДокумент)

	КомментарийНачало = "[*]"
						 + ДиалогСтрока.Автор + " " 
						 + " ["
						 + ДиалогСтрока.Дата
						 + " ]:"
						 + Символы.ПС;

	КомментарийКонец = "[/*]"
					 + Символы.ПС
					 + Символы.ПС
					 ; 
					 
	ПозицияНачала = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(0);				 
	ФорматированныйДокумент.Вставить(ПозицияНачала, КомментарийНачало, Тип("ТекстФорматированногоДокумента"));				 
	ФорматированныйДокумент.Добавить(КомментарийКонец, Тип("ТекстФорматированногоДокумента"));				 
					 
КонецПроцедуры

&НаСервере
Процедура СоединитьФорматированныеДокументы(ИсходныйДокумент, ДокументПолучатель) 
	
	ТекМаркСписок = Неопределено;
    ТекНумСписок = Неопределено;
    
    Для Каждого Параграф Из ИсходныйДокумент.Элементы Цикл
        
        ЭтоМаркСписок = Параграф.ТипПараграфа=ТипПараграфа.МаркированныйСписок;
        ЭтоНумСписок = Параграф.ТипПараграфа=ТипПараграфа.НумерованныйСписок;
        ЭтоОбычныйСписок = Параграф.ТипПараграфа=ТипПараграфа.Обычный;

        Если ЭтоМаркСписок И ТекМаркСписок<>Неопределено Тогда 
            НовыйПараграф = ТекМаркСписок;
        ИначеЕсли ЭтоНумСписок И ТекНумСписок<>Неопределено Тогда 
            НовыйПараграф = ТекНумСписок;
        Иначе 
            НовыйПараграф = ДокументПолучатель.Элементы.Добавить();
            ЗаполнитьЗначенияСвойств(НовыйПараграф, Параграф);
            ТекМаркСписок = ?(ЭтоМаркСписок, НовыйПараграф, Неопределено);
            ТекНумСписок = ?(ЭтоНумСписок, НовыйПараграф, Неопределено);
        КонецЕсли;
        
        Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
            Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
                НовыйТекст                                         = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа, Тип("ТекстФорматированногоДокумента"));
                ЗаполнитьЗначенияСвойств(НовыйТекст, ЭлементПараграфа);
                
            ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
                НовыйПараграф.Элементы.Добавить(ЭлементПараграфа, Тип("ПереводСтрокиФорматированногоДокумента"));
                
            ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
                НоваяКартинка = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа, Тип("КартинкаФорматированногоДокумента"));
                ЗаполнитьЗначенияСвойств(НоваяКартинка, ЭлементПараграфа);
            КонецЕсли;
        КонецЦикла;
	КонецЦикла;    
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаДиалоговПриИзменении(Элемент)
	ОбновитьДиалогиКЗадаче();
КонецПроцедуры

#КонецОбласти

#КонецОбласти	  

		  

